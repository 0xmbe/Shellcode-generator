
#include <iostream>
#include <windows.h>
#include <iostream>
#include <cstring>

//##################
// TEST OUTPUT: INT
//##################

//
// TEST INPUT: INT
//
// "\x55\x48\x89\xE5\x89\x4D\x10\x89\x55\x18\x8B\x55\x10\x8B\x45\x18\x01\xD0\x5D\xC3";
int test_01_out_INT_in_2xINT(int num1, int num2){					// OK
	return num1 + num2;
}

//
// TEST INPUT: CHAR
//
// "\x55\x48\x89\xE5\x48\x83\xEC\x10\x89\xC8\x88\x45\x10\xC6\x45\xFF\x63\x80\x7D\x10\x63\x75\x07\xB8\x01\x00\x00\x00\xEB\x05\xB8\x00\x00\x00\x00\x48\x83\xC4\x10\x5D\xC3";
int test_02_out_INT_in_CHAR(char c){								// OK
	const char p = 'c';
	if (p == c)
		return 1; 
	return 0;
}

//
// TEST INPUT: CONST CHAR*
//
// "\x55\x48\x89\xE5\x48\x89\x4D\x10\xB8\x01\x00\x00\x00\x5D\xC3";
int test_03_out_INT_in_PKc(const char* str1) {						// OK
	return 1;
}
// "\x55\x48\x89\xE5\x48\x89\x4D\x10\x48\x8B\x45\x10\x0F\xB6\x00\x3C\x61\x75\x07\xB8\x00\x00\x00\x00\xEB\x05\xB8\x01\x00\x00\x00\x5D\xC3";
int test_04_out_INT_in_PKc(const char* str1) {						// OK
	if (str1[0] == 'a'){
		return 0;
	}
	return 1;
}
// "\x55\x48\x89\xE5\x48\x83\xEC\x10\x48\x89\x4D\x10\xC7\x45\xFC\x00\x00\x00\x00\xC7\x45\xFC\x00\x00\x00\x00\xEB\x04\x83\x45\xFC\x01\x8B\x45\xFC\x48\x63\xD0\x48\x8B\x45\x10\x48\x01\xD0\x0F\xB6\x00\x84\xC0\x75\xE8\x8B\x45\xFC\x48\x83\xC4\x10\x5D\xC3";
int test_05_out_INT_in_PKc(const char* str1) {						// OK
	int c = 0;
	for (c = 0; str1[c] != '\0'; ++c){}
	return c;
}
// "\x55\x48\x89\xE5\x48\x83\xEC\x10\x48\x89\x4D\x10\xC7\x45\xFC\x0A\x00\x00\x00\xC7\x45\xF8\x14\x00\x00\x00\x8B\x45\xFC\x3B\x45\xF8\x7E\x05\x8B\x45\xFC\xEB\x12\x8B\x45\xF8\x3B\x45\xFC\x7E\x05\x8B\x45\xF8\xEB\x05\xB8\x00\x00\x00\x00\x48\x83\xC4\x10\x5D\xC3";
int test_06_out_INT_in_PKc(const char* str1) {						// OK
	int a = 10;
	int b = 20;
	if (a > b){
		return a;
	}
	if (b > a){
		return b;
	}
	return 0;
}
// "\x55\x48\x89\xE5\xB8\x01\x00\x00\x00\x5D\xC3";
int test_07_out_INT_in_VOID(){										// OK
	return 1;
}
// "\x55\x48\x89\xE5\x89\x4D\x10\x8B\x45\x10\x5D\xC3";
int test_08_out_INT_in_INT(int in){									// OK
	return in;
}
// "\x55\x48\x89\xE5\x48\x83\xEC\x20\x48\x89\x4D\x10\x48\xB8\x76\x61\x72\x34\x35\x73\x73\x66\x48\xBA\x78\x6B\x67\x6F\x6F\x66\x72\x78\x48\x89\x45\xE0\x48\x89\x55\xE8\xC6\x45\xF0\x00\xC7\x45\xFC\x00\x00\x00\x00\xC7\x45\xFC\x00\x00\x00\x00\xEB\x04\x83\x45\xFC\x01\x8B\x45\xFC\x48\x63\xD0\x48\x8B\x45\x10\x48\x01\xD0\x0F\xB6\x00\x84\xC0\x75\xE8\x83\x7D\xFC\x10\x74\x07\xB8\x01\x00\x00\x00\xEB\x3D\xC7\x45\xF8\x00\x00\x00\x00\xEB\x29\x8B\x45\xF8\x48\x63\xD0\x48\x8B\x45\x10\x48\x01\xD0\x0F\xB6\x10\x8B\x45\xF8\x48\x98\x0F\xB6\x44\x05\xE0\x38\xC2\x74\x07\xB8\x01\x00\x00\x00\xEB\x0F\x83\x45\xF8\x01\x83\x7D\xF8\x0F\x7E\xD1\xB8\x00\x00\x00\x00\x48\x83\xC4\x20\x5D\xC3";
int test_09_out_INT_in_PKc(const char* str1) {						// OK
	const char str2[] = "var45ssfxkgoofrx";
	int c = 0;
	for (c = 0; str1[c] != '\0'; ++c){}		// count string length
	if (c != 16){
		return 1;
	}
	for (int i = 0; i < 16; ++i) {
		if (str1[i] != str2[i]) {
			return 1;
		}
	}
	return 0;
}

//
// TEST INPUT: CONST CHAR* & INT		----> Currently not supported different input types
//
// "\x55\x48\x89\xE5\x48\x83\xEC\x10\x48\x89\x4D\x10\x48\x89\x55\x18\x44\x89\x45\x20\xC7\x45\xFC\x00\x00\x00\x00\xEB\x2F\x8B\x45\xFC\x48\x63\xD0\x48\x8B\x45\x10\x48\x01\xD0\x0F\xB6\x10\x8B\x45\xFC\x48\x63\xC8\x48\x8B\x45\x18\x48\x01\xC8\x0F\xB6\x00\x38\xC2\x74\x07\xB8\x01\x00\x00\x00\xEB\x11\x83\x45\xFC\x01\x8B\x45\xFC\x3B\x45\x20\x7C\xC9\xB8\x00\x00\x00\x00\x48\x83\xC4\x10\x5D\xC3";
int test_10_out_INT_in_2xPKc_1xINT(const char* str1, const char* str2, int length) {		// CRASH
	for (int i = 0; i < length; ++i) {
		if (str1[i] != str2[i]) {
			return 1;
		}
	}
	return 0;
}
// "\x55\x48\x89\xE5\x48\x83\xEC\x20\x48\x89\x4D\x10\x89\x55\x18\x48\xB8\x76\x61\x72\x34\x35\x73\x73\x66\x48\x89\x45\xED\x48\xB8\x66\x78\x6B\x67\x6F\x6F\x66\x00\x48\x89\x45\xF4\xC7\x45\xFC\x00\x00\x00\x00\xEB\x29\x8B\x45\xFC\x48\x63\xD0\x48\x8B\x45\x10\x48\x01\xD0\x0F\xB6\x10\x8B\x45\xFC\x48\x98\x0F\xB6\x44\x05\xED\x38\xC2\x74\x07\xB8\x01\x00\x00\x00\xEB\x11\x83\x45\xFC\x01\x8B\x45\xFC\x3B\x45\x18\x7C\xCF\xB8\x00\x00\x00\x00\x48\x83\xC4\x20\x5D\xC3";
int test_11_out_INT_in_1xPKc_1xINT(const char* str1, int length) {							// CRASH
	const char str2[] = "var45ssfxkgoof";
	for (int i = 0; i < length; ++i) {
		if (str1[i] != str2[i]) {
			return 1;
		}
	}
	return 0;
}

//##################
// TEST OUTPUT: CONST CHAR*
//##################

//
// TEST INPUT: CONST CHAR*
//
// "\x55\x48\x89\xE5\x48\x89\x4D\x10\x48\x8D\x05\x00\x00\x00\x00\x5D\xC3";
const char* test_12_out_PKc_in_PKc(const char* str1){										// CRASH
	return "OK";
}

// int test_1_out_INT_in_string(std::string str1) {
	// std::string str2 = "var45ssfxkgoofrx";
	// if (str1.size() != 16) {
		// return 1;
	// }
	// for (int i = 0; i < 16; ++i) {
		// if (str1.c_str()[i] != str2.c_str()[i]) {
			// return 1;
		// }
	// }
	// return 0;
// }
// int test_1_out_INT_in_2xPKc(const char* str1, const char* str2) {			// ?
	// for (int i = 0; str1[i] != '\0' || str2[i] != '\0'; ++i) {
		// if (str1[i] > str2[i]) {
			// return 1;
		// }
		// if (str2[i] > str1[i]) {
			// return -1;
		// }
	// }
	// return 0;
// }
// int test_1_out_INT_in_PKc(const char str1[32], const char str2[32]) {		// ?
	// for (int i = 0; str1[i] != '\0' || str2[i] != '\0'; ++i) {
		// if (str1[i] > str2[i]) {
			// return 1;
		// }
		// if (str2[i] > str1[i]) {
			// return -1;
		// }
	// }
	// return 0;
// }

// // FOR TESTING extract_hex_opcode_from_objdump
// int test_xx_big_function(const char* str1, int num1, int num2) {							// 

	// // Count
	// int c1 = 0;
	// for (c1 = 0; str1[c1] != '\0'; ++c1) {}


	// int c3 = 0;
	// const char str2[] = "var45ssfxkgoof";
	// for (int i = 0; i < c1; ++i) {
		// if (str1[i] != str2[i]) {
			// c3 = i;
		// }
	// }

	// // Sum
	// int sum = num1 + num2 + c3;

	// return sum;
// }


int main(){
	return 0;
}

